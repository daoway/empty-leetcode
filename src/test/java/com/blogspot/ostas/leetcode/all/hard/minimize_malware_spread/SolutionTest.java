package com.blogspot.ostas.leetcode.all.hard.minimize_malware_spread;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class SolutionTest {

    /*
      Example 1:
    Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
    Output: 0
    Example 2:
    Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
    Output: 0
    Example 3:
    Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
    Output: 1
      Constraints:
    n == graph.length
    n == graph[i].length
    2 <= n <= 300
    graph[i][j] is 0 or 1.
    graph[i][j] == graph[j][i]
    graph[i][i] == 1
    1 <= initial.length <= n
    0 <= initial[i] <= n - 1
    All the integers in initial are unique.
    */
    @Test
    void example_0() {
        var solution = new Solution();
        int[][] graph = new int[][]{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial = new int[]{0, 1};
        int expected = 0;
        var result = solution.minMalwareSpread(graph, initial);
        assertThat(result).isEqualTo(expected);
    }

    @Test
    void example_1() {
        var solution = new Solution();
        int[][] graph = new int[][]{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        int[] initial = new int[]{0, 2};
        int expected = 0;
        var result = solution.minMalwareSpread(graph, initial);
        assertThat(result).isEqualTo(expected);
    }

    @Test
    void example_2() {
        var solution = new Solution();
        int[][] graph = new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        int[] initial = new int[]{1, 2};
        int expected = 1;
        var result = solution.minMalwareSpread(graph, initial);
        assertThat(result).isEqualTo(expected);
    }

}
